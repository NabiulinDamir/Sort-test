
export const bubbleSort = (arr) => {
    let n = arr.length;
    for (let i = 0; i < n - 1; i++) {
        let swapped = false;
        for (let j = 0; j < n - 1 - i; j++) {
            if (arr[j] > arr[j + 1]) {
                [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];
                swapped = true;
            }
        }
        if (!swapped) {
            break;
        }
    }
    return arr;
}

const ChangeNumber = (a,b) => {
    a = a + b;
    b = a - b;
    a = a - b;
    console.log(a,b)
}
const ChangeNumberXor = (a,b) => {
    a = a ^ b;
    b = a ^ b;
    a = a ^ b;
    console.log(a,b)
}
// Пример использования
const arr = [64, 34, 25, 12, 22, 11, 90];
const sortedArr = bubbleSort(arr);

let a = 8;
let b = 4;

ChangeNumber(a,b)
ChangeNumberXor(a,b)

console.log(arr, sortedArr); // Вывод: [11, 12, 22, 25, 34, 64, 90]



// + Повышение качества кода: Позволяет выявлять и исправлять ошибки до релиза, повышая качество ПО.
// + Уверенность в изменениях: Быстрая проверка на наличие новых ошибок при внесении изменений.
// + Документация: Автоматизированные тесты демонстрируют, как должен работать код.
// + Экономия ресурсов: Снижение затрат на исправление багов и поддержку в будущем.
// + Улучшение дизайна: Способствует более чистой и модульной архитектуре.


// - Временные затраты: Создание и поддержка тестов требуют времени, что может задержать разработку.
// - Сложность: Трудоемкость написания тестов для сложных систем.
// - Ложное чувство безопасности: Тесты не гарантируют отсутствие ошибок, если они недостаточно покрывают функциональность.
// - Зависимость от тестов: Плохо спроектированные тесты могут создавать ложные исключения.
// - Работа с внешними зависимостями: Тестирование API и баз данных может быть сложным и времязатратным.